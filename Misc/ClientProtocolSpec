

The following is the draft specification for the Server-Phone communication protocol

Definitions:
	Client: The iPhone/iPad device contacting the server
	ClientID: A unique per device identifier sent to the client from the server
	Server: Our crazy server doing *stuff*

Format:
	The formats use psuedo regular expression syntax to describe a format.
	Note that {n} indicates repetition and ()? indicates zero or one occurences of ()
	<Value> refers to a placeholder that should be replaced with an actual value,
	not a literal <Value>

	"(<Key>: <Value>\r\n)*" Refers to optional HTTP headers that are not needed for the protocol

Encoding:
	The protocol is a text based protocol, we will use ASCII encoding for simplicity.

	
HTTP Requests:
	Our format is basically HTTP with a custom JSON request/response body to convey protocol information.
	Use standard HTTP libraries to make requests, using /<Endpoint>/<MessageName> as the URL to request
		a message with a given name.

Song ID:
	Song IDs will never change.

Connection Behavior:
	Unless otherwise noted, the connection between the client and the server should
	be persistent and held open. Use the HTTP "Connection: keep-alive" header when making requests.
	In the event of an unexpected disconnection between the client
	and the server, the connection should be reopened and the previous client ID
	should be reused for continued communication.

Connection Protocol:
	We will use TCP/HTTP over port 5050
	Port is temporary, likely to switch to Bonjour for auto-discover of port and IP.

General Protocol:
	The protocol is based on the server sending updates to the phone as votes and likes change
	Additionally, the phone can request needed information from the server.

	For update listening, the following is the general flow:
		1. Client sends REQUEST_CLIENT_UPDATE request using HTTP long polling
			1.A Client holds connection open
			1.B If connection times out, resend request
		2. Server sends response
			2.A Either JSON or image data, use Content-Type to disambiguate
		3. Client processes update and performs needed behavior
		4. goto step 1

	Ideally, only one REQUEST_CLIENT_UPDATE request should be active for a given clientID.
	This suggestion does not apply to other request types, any other request may be issued
		while a REQUEST_CLIENT_UPDATE request is still pending



Client to Server messages:
	AUTHENTICATE_CLIENT:
		Description:
			Attempt to log in to the server
		Format:
			"POST /client/authenticate HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 { "pin": "<Pin>" }
		Remarks:

	DEAUTHENTICATE_CLIENT:
		Description:
			Deauthenticate when logging out. Recommended so
			the server can release client related resources.
		Format:
			"POST /client/deauthenticate HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 {"id": "<ClientID>"}
		Remarks:
			After succesfully making this request, <ClientID>
			should no longer be used

	REQUEST_SONG_LIST:
		Description:
			Sent to the server to request the current song list
		Format:
			"GET /client/request_song_list?clientID=<ClientID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 \r\n"
		Remarks:
	

	VOTE:
		Description:
			Sent to the server to vote on a song
		Format:
			"POST /client/vote?clientID=<ClientID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 {"id": <SongID>}"
		Remarks:
 
	LIKE:
		Description:
			Sent to the server to like the current song
		Format:
			"POST /client/like?clientID=<ClientID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 {"id": <SongID>}"
		Remarks:
	

	DISLIKE:
		Description:
			Sent to the server to dislike the current song
		Format:
			"POST /client/dislike?clientID=<ClientID> HTTP/1.1\r\n
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 {"id": "<SongID>"}"
		Remarks:


	REQUEST_CLIENT_UPDATE:
		Description:
			Request any new updates from the server.
		Format:
			"GET /client/request_update?clientID=<ClientID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 \r\n"
		Remarks:
			This request should be made using "long-polling"
			i.e. Start HTTP connection with large timeout value, and the server
				will hold the connection open and won't send a response until
				an update becomes available to send to the client.
				Best to use asynchronous HTTP libraries for this purpose, and set high timeout.

	REQUEST_LIKE_UPDATE:
		Description:
			Ask the server to send a like update
		Format:
			"GET /client/request_like_update?clientID=<ClientID> HTTP/1.1\r\n
			 (<Key>: <Value>\r\n)*
			 \r\n"
		Remarks:

	REQUEST_VOTE_UPDATE:
		Description:
			Ask the server to send a vote update
		Format:
			"GET /client/request_vote_update?clientID=<ClientID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 \r\n"
		Remarks:


	REQUEST_SONG_UPDATE:
		Description:
			Ask the server to send a song update about the current song.
			Response to this request will be the SONG_UPDATE message.
		Format:
			"GET /client/request_song_update?clientID=<ClientID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			 \r\n"
		Remarks:


	REQUEST_PHOTO:
		Description:
			Ask the server to send a photo for the song with the given id
		Format:
			"GET /client/request_photo?clientID=<ClientID>&songID=<SongID> HTTP/1.1\r\n
			(<Key>: <Value>\r\n)*
			\r\n"
		Remarks:
			Song artwork will frequently not be available, so be prepared
			to handle 404 status responses indicating that a song doesn't
			have artwork available
		
		


Server to Client messages:
	AUTHENTICATED:
		Description:
			Response to a successful authenicate message from the client
		Format:
			"HTTP/1.1 200 Authenticated\r\n
			 (<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 { "id": "<ClientID>"}"
		Remarks:
			

	SONG_UPDATE:
		Description:
			Indicates the current state of song playback.
			The particular message will very likely be changed.
			Probably move to a multipart encoded message, JSON and image data
		Format:
			"HTTP/1.1 200 Update Available\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 { "update_type": "current_song",
			   "values": {
				   "id": <SongID>,
				   "name": "<SongName>",
				   "artist": "<Artist>",
				   "album": "<Album>",
				   "length": <Length>,
				   "status": "(Playing|Stopped)"
				}
			}"
		Remarks:
		Notes:
			The client should use the REQUEST_PHOTO request to get
			album or song artwork.

	VOTE_UPDATE:
		Description:
			Indicates the current voting results.
		Format:
			"HTTP/1.1 200 Update Available\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n\r\n
			 {"update_type": "votes", "values": [({"id": "<Votes>"})*]}"
		Remarks:
		

	LIKE_UPDATE:
		Description:
			Indicates the current balance of likes/dislikes for a song
		Format:
			"HTTP/1.1 200 Update Available\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 { "update_type": "likes",
			   "values": [({"id": <SongID>, "likes": <Likes>, "dislikes": <Dislikes>, "balance": <Balance>})*]}"
		Remarks:
			Likes and dislikes are integers, while balance is a double in the interval [-1,1]
			Likes and dislikes are the raw data, while balance has been computed by the server.
		Note:
			If the <SongID> doesn't match the song ID the app thinks is playing,
			it would be prudent to refresh that information

	SONG_LIST:
		Description:
			A listing of the songs currently in the set list
		Format:
			"HTTP/1.1 200 List Available\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: application/json\r\n
			 Content-Length: <JsonLength>\r\n
			 \r\n
			 {"update_type": "song_list",
			  "values": [({"id": <SongID>,
						  "name": "<SongName>",
						  "artist": "<SongArtist>",
						  "album": "<SongAlbum>",
						  "votes": <Votes>})*]
			 }"			
		Remarks:

	SONG_PHOTO:
		Description:
			Response to REQUEST_SONG request
		Format:
			"HTTP/1.1 200 Photo Available\r\n
			(<Key>: <Value>\r\n)*
			 Content-Type: image/<ImageType>\r\n
			 Content-Length: <ImageSize>\r\n
			 \r\n
			 <ImageSize bytes of image data>"
		Remarks:
			Often the client will recieve a 404 failed response if
			a photo wasn't available. In such a case display a placeholder.
	

	FAILED:
		Description:
			A message to indicate to the client that an operation failed
		Format:
			"HTTP/1.1 <ErrorCode!=200> <Explaination>\r\n
			 (<Key>: <Value>\r\n)*
			 \r\n"
		Remarks:
		

